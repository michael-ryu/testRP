$themes: (
  dark: (
    "none-hover": $d-none-hover,
    "bg-color": $d-background,
    "bg-color1": $d-background,
    "btn-hover-bg": $d-btn-hover-bg,
    "none-hover-text": $d-none-hover,
    "hover-text": $d-hover,
    "text-main-title": $d-text-main-title,
    "text-sub-title": $d-text-sub-title,
    "btn-bg": $l-text-main-title,
    "modal-bg": $d-tab-bg,
  ),
  light: (
    "text-color": $text-b,
    "bg-color": $l-background,
    "bg-color1": $l-background1,
    "none-hover-text": $l-none-hover,
    "hover-text": $l-hover,
    "btn-hover-bg": $l-btn-hover-bg,
    "text-main-title": $l-text-main-title,
    "text-sub-title": $l-text-sub-title,
    "btn-bg": $l-btn-bg,
    "modal-bg": $l-none-hover,
  ),
);

@mixin theme() {
  @each $theme, $map in $themes {
    $theme-map: $map !global;

    .#{$theme} & {
      @content;
    }
  }

  $theme-map: null !global;
}

@function theme-get($key) {
  @return map-get($theme-map, $key);
}

@function toRem($value) {
  $remValue: $value / 16 + rem;
  @return $remValue;
}

@mixin button-reset {
  button {
    svg {
      stroke: rgba(255, 255, 255, 0.5);
      fill: rgba(255, 255, 255, 0.5);

      path {
        fill: rgba(255, 255, 255, 0.5);
      }
    }

    &:hover {
      span {
        color: rgba(255, 255, 255, 1);
      }
      svg {
        fill: rgba(255, 255, 255, 1);
        stroke: rgba(255, 255, 255, 1);
        path {
          fill: rgba(255, 255, 255, 1);
        }
      }
    }
  }
}
@mixin hover-border {
  &:hover {
    border: solid 0.5px rgba(255, 255, 255, 1);
    @include theme() {
      border: solid 0.5px theme-get("text-main-title") !important;
    }
    span {
      color: rgba(255, 255, 255, 1);
      @include theme() {
        color: solid 0.5px theme-get("text-main-title") !important;
      }
    }
  }
}
